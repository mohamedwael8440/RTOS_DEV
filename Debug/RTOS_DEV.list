
RTOS_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000041c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a4  080005a4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080005a4  080005a4  000105a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080005a8  080005a8  000105a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080005ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          0000001c  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000030  20000030  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000014f0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000454  00000000  00000000  00021534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000258  00000000  00000000  00021988  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000210  00000000  00000000  00021be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00000c0f  00000000  00000000  00021df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000009f0  00000000  00000000  000229ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000233ef  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000008e0  00000000  00000000  0002346c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00023d4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800058c 	.word	0x0800058c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800058c 	.word	0x0800058c

080001c8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001cc:	4a12      	ldr	r2, [pc, #72]	; (8000218 <RCC_DeInit+0x50>)
 80001ce:	4b12      	ldr	r3, [pc, #72]	; (8000218 <RCC_DeInit+0x50>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <RCC_DeInit+0x50>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 80001de:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <RCC_DeInit+0x50>)
 80001e0:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <RCC_DeInit+0x50>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 80001e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <RCC_DeInit+0x50>)
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <RCC_DeInit+0x54>)
 80001f2:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <RCC_DeInit+0x50>)
 80001f6:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <RCC_DeInit+0x58>)
 80001f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001fc:	4a06      	ldr	r2, [pc, #24]	; (8000218 <RCC_DeInit+0x50>)
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <RCC_DeInit+0x50>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000206:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <RCC_DeInit+0x50>)
 800020a:	2200      	movs	r2, #0
 800020c:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 800020e:	bf00      	nop
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	40023800 	.word	0x40023800
 800021c:	24003010 	.word	0x24003010
 8000220:	20003000 	.word	0x20003000

08000224 <main>:

#include "stm32f4xx.h"


int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
 RCC_DeInit();
 8000228:	f7ff ffce 	bl	80001c8 <RCC_DeInit>
 SystemCoreClockUpdate();
 800022c:	f000 f892 	bl	8000354 <SystemCoreClockUpdate>
 8000230:	2300      	movs	r3, #0
 /*16 MHz */
}
 8000232:	4618      	mov	r0, r3
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000270 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800023c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800023e:	e003      	b.n	8000248 <LoopCopyDataInit>

08000240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000246:	3104      	adds	r1, #4

08000248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000248:	480b      	ldr	r0, [pc, #44]	; (8000278 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800024c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800024e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000250:	d3f6      	bcc.n	8000240 <CopyDataInit>
  ldr  r2, =_sbss
 8000252:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000254:	e002      	b.n	800025c <LoopFillZerobss>

08000256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000258:	f842 3b04 	str.w	r3, [r2], #4

0800025c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800025e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000260:	d3f9      	bcc.n	8000256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000262:	f000 f841 	bl	80002e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000266:	f000 f96d 	bl	8000544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800026a:	f7ff ffdb 	bl	8000224 <main>
  bx  lr    
 800026e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000270:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000274:	080005ac 	.word	0x080005ac
  ldr  r0, =_sdata
 8000278:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800027c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000280:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000284:	20000030 	.word	0x20000030

08000288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC_IRQHandler>

0800028a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800029c:	e7fe      	b.n	800029c <HardFault_Handler+0x4>

0800029e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <MemManage_Handler+0x4>

080002a4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <BusFault_Handler+0x4>

080002aa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80002ae:	e7fe      	b.n	80002ae <UsageFault_Handler+0x4>

080002b0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002ec:	4a16      	ldr	r2, [pc, #88]	; (8000348 <SystemInit+0x60>)
 80002ee:	4b16      	ldr	r3, [pc, #88]	; (8000348 <SystemInit+0x60>)
 80002f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002fc:	4a13      	ldr	r2, [pc, #76]	; (800034c <SystemInit+0x64>)
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <SystemInit+0x64>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <SystemInit+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800030e:	4a0f      	ldr	r2, [pc, #60]	; (800034c <SystemInit+0x64>)
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <SystemInit+0x64>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800031c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <SystemInit+0x64>)
 8000320:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <SystemInit+0x68>)
 8000322:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000324:	4a09      	ldr	r2, [pc, #36]	; (800034c <SystemInit+0x64>)
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <SystemInit+0x64>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800032e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <SystemInit+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000336:	f000 f889 	bl	800044c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <SystemInit+0x60>)
 800033c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000340:	609a      	str	r2, [r3, #8]
#endif
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000ed00 	.word	0xe000ed00
 800034c:	40023800 	.word	0x40023800
 8000350:	24003010 	.word	0x24003010

08000354 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b087      	sub	sp, #28
 8000358:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]
 8000362:	2302      	movs	r3, #2
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	2300      	movs	r3, #0
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	2302      	movs	r3, #2
 800036c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800036e:	4b32      	ldr	r3, [pc, #200]	; (8000438 <SystemCoreClockUpdate+0xe4>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	f003 030c 	and.w	r3, r3, #12
 8000376:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000378:	693b      	ldr	r3, [r7, #16]
 800037a:	2b04      	cmp	r3, #4
 800037c:	d007      	beq.n	800038e <SystemCoreClockUpdate+0x3a>
 800037e:	2b08      	cmp	r3, #8
 8000380:	d009      	beq.n	8000396 <SystemCoreClockUpdate+0x42>
 8000382:	2b00      	cmp	r3, #0
 8000384:	d13d      	bne.n	8000402 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000386:	4b2d      	ldr	r3, [pc, #180]	; (800043c <SystemCoreClockUpdate+0xe8>)
 8000388:	4a2d      	ldr	r2, [pc, #180]	; (8000440 <SystemCoreClockUpdate+0xec>)
 800038a:	601a      	str	r2, [r3, #0]
      break;
 800038c:	e03d      	b.n	800040a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800038e:	4b2b      	ldr	r3, [pc, #172]	; (800043c <SystemCoreClockUpdate+0xe8>)
 8000390:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <SystemCoreClockUpdate+0xf0>)
 8000392:	601a      	str	r2, [r3, #0]
      break;
 8000394:	e039      	b.n	800040a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000396:	4b28      	ldr	r3, [pc, #160]	; (8000438 <SystemCoreClockUpdate+0xe4>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	0d9b      	lsrs	r3, r3, #22
 800039c:	f003 0301 	and.w	r3, r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003a2:	4b25      	ldr	r3, [pc, #148]	; (8000438 <SystemCoreClockUpdate+0xe4>)
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003aa:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d00c      	beq.n	80003cc <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003b2:	4a24      	ldr	r2, [pc, #144]	; (8000444 <SystemCoreClockUpdate+0xf0>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ba:	4a1f      	ldr	r2, [pc, #124]	; (8000438 <SystemCoreClockUpdate+0xe4>)
 80003bc:	6852      	ldr	r2, [r2, #4]
 80003be:	0992      	lsrs	r2, r2, #6
 80003c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003c4:	fb02 f303 	mul.w	r3, r2, r3
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	e00b      	b.n	80003e4 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <SystemCoreClockUpdate+0xec>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d4:	4a18      	ldr	r2, [pc, #96]	; (8000438 <SystemCoreClockUpdate+0xe4>)
 80003d6:	6852      	ldr	r2, [r2, #4]
 80003d8:	0992      	lsrs	r2, r2, #6
 80003da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003de:	fb02 f303 	mul.w	r3, r2, r3
 80003e2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <SystemCoreClockUpdate+0xe4>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	0c1b      	lsrs	r3, r3, #16
 80003ea:	f003 0303 	and.w	r3, r3, #3
 80003ee:	3301      	adds	r3, #1
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003fc:	4a0f      	ldr	r2, [pc, #60]	; (800043c <SystemCoreClockUpdate+0xe8>)
 80003fe:	6013      	str	r3, [r2, #0]
      break;
 8000400:	e003      	b.n	800040a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <SystemCoreClockUpdate+0xe8>)
 8000404:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <SystemCoreClockUpdate+0xec>)
 8000406:	601a      	str	r2, [r3, #0]
      break;
 8000408:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <SystemCoreClockUpdate+0xe4>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	091b      	lsrs	r3, r3, #4
 8000410:	f003 030f 	and.w	r3, r3, #15
 8000414:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <SystemCoreClockUpdate+0xf4>)
 8000416:	5cd3      	ldrb	r3, [r2, r3]
 8000418:	b2db      	uxtb	r3, r3
 800041a:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <SystemCoreClockUpdate+0xe8>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	fa22 f303 	lsr.w	r3, r2, r3
 8000426:	4a05      	ldr	r2, [pc, #20]	; (800043c <SystemCoreClockUpdate+0xe8>)
 8000428:	6013      	str	r3, [r2, #0]
}
 800042a:	bf00      	nop
 800042c:	371c      	adds	r7, #28
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40023800 	.word	0x40023800
 800043c:	20000000 	.word	0x20000000
 8000440:	00f42400 	.word	0x00f42400
 8000444:	017d7840 	.word	0x017d7840
 8000448:	20000004 	.word	0x20000004

0800044c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	2300      	movs	r3, #0
 8000458:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800045a:	4a36      	ldr	r2, [pc, #216]	; (8000534 <SetSysClock+0xe8>)
 800045c:	4b35      	ldr	r3, [pc, #212]	; (8000534 <SetSysClock+0xe8>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000464:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000466:	4b33      	ldr	r3, [pc, #204]	; (8000534 <SetSysClock+0xe8>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800046e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3301      	adds	r3, #1
 8000474:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d103      	bne.n	8000484 <SetSysClock+0x38>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000482:	d1f0      	bne.n	8000466 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000484:	4b2b      	ldr	r3, [pc, #172]	; (8000534 <SetSysClock+0xe8>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d002      	beq.n	8000496 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000490:	2301      	movs	r3, #1
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	e001      	b.n	800049a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000496:	2300      	movs	r3, #0
 8000498:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d142      	bne.n	8000526 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004a0:	4a24      	ldr	r2, [pc, #144]	; (8000534 <SetSysClock+0xe8>)
 80004a2:	4b24      	ldr	r3, [pc, #144]	; (8000534 <SetSysClock+0xe8>)
 80004a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004aa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80004ac:	4a22      	ldr	r2, [pc, #136]	; (8000538 <SetSysClock+0xec>)
 80004ae:	4b22      	ldr	r3, [pc, #136]	; (8000538 <SetSysClock+0xec>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004b6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80004b8:	4a1e      	ldr	r2, [pc, #120]	; (8000534 <SetSysClock+0xe8>)
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <SetSysClock+0xe8>)
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80004c0:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <SetSysClock+0xe8>)
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <SetSysClock+0xe8>)
 80004c4:	689b      	ldr	r3, [r3, #8]
 80004c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004ca:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80004cc:	4a19      	ldr	r2, [pc, #100]	; (8000534 <SetSysClock+0xe8>)
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <SetSysClock+0xe8>)
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80004d6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80004d8:	4b16      	ldr	r3, [pc, #88]	; (8000534 <SetSysClock+0xe8>)
 80004da:	4a18      	ldr	r2, [pc, #96]	; (800053c <SetSysClock+0xf0>)
 80004dc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80004de:	4a15      	ldr	r2, [pc, #84]	; (8000534 <SetSysClock+0xe8>)
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <SetSysClock+0xe8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004ea:	bf00      	nop
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <SetSysClock+0xe8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f9      	beq.n	80004ec <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <SetSysClock+0xf4>)
 80004fa:	f240 7205 	movw	r2, #1797	; 0x705
 80004fe:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000500:	4a0c      	ldr	r2, [pc, #48]	; (8000534 <SetSysClock+0xe8>)
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <SetSysClock+0xe8>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	f023 0303 	bic.w	r3, r3, #3
 800050a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800050c:	4a09      	ldr	r2, [pc, #36]	; (8000534 <SetSysClock+0xe8>)
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <SetSysClock+0xe8>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	f043 0302 	orr.w	r3, r3, #2
 8000516:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000518:	bf00      	nop
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <SetSysClock+0xe8>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f003 030c 	and.w	r3, r3, #12
 8000522:	2b08      	cmp	r3, #8
 8000524:	d1f9      	bne.n	800051a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40023800 	.word	0x40023800
 8000538:	40007000 	.word	0x40007000
 800053c:	07405419 	.word	0x07405419
 8000540:	40023c00 	.word	0x40023c00

08000544 <__libc_init_array>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	4e0d      	ldr	r6, [pc, #52]	; (800057c <__libc_init_array+0x38>)
 8000548:	4c0d      	ldr	r4, [pc, #52]	; (8000580 <__libc_init_array+0x3c>)
 800054a:	1ba4      	subs	r4, r4, r6
 800054c:	10a4      	asrs	r4, r4, #2
 800054e:	2500      	movs	r5, #0
 8000550:	42a5      	cmp	r5, r4
 8000552:	d109      	bne.n	8000568 <__libc_init_array+0x24>
 8000554:	4e0b      	ldr	r6, [pc, #44]	; (8000584 <__libc_init_array+0x40>)
 8000556:	4c0c      	ldr	r4, [pc, #48]	; (8000588 <__libc_init_array+0x44>)
 8000558:	f000 f818 	bl	800058c <_init>
 800055c:	1ba4      	subs	r4, r4, r6
 800055e:	10a4      	asrs	r4, r4, #2
 8000560:	2500      	movs	r5, #0
 8000562:	42a5      	cmp	r5, r4
 8000564:	d105      	bne.n	8000572 <__libc_init_array+0x2e>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800056c:	4798      	blx	r3
 800056e:	3501      	adds	r5, #1
 8000570:	e7ee      	b.n	8000550 <__libc_init_array+0xc>
 8000572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000576:	4798      	blx	r3
 8000578:	3501      	adds	r5, #1
 800057a:	e7f2      	b.n	8000562 <__libc_init_array+0x1e>
 800057c:	080005a4 	.word	0x080005a4
 8000580:	080005a4 	.word	0x080005a4
 8000584:	080005a4 	.word	0x080005a4
 8000588:	080005a8 	.word	0x080005a8

0800058c <_init>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr

08000598 <_fini>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr
